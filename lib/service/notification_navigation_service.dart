import 'package:flutter/material.dart';
import 'dart:convert';

class NotificationNavigationService {
  static final NotificationNavigationService _instance = 
      NotificationNavigationService._internal();
  factory NotificationNavigationService() => _instance;
  NotificationNavigationService._internal();

  static GlobalKey<NavigatorState> navigatorKey = GlobalKey<NavigatorState>();

  /// ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡∏à‡∏≤‡∏Å notification data - ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ notifications ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  static Future<void> handleNotificationNavigation(Map<String, dynamic> data) async {
    final BuildContext? context = navigatorKey.currentContext;
    if (context == null) {
      print('‚ö†Ô∏è Navigator context is null, cannot navigate');
      return;
    }

    print('üß≠ Navigating to notifications screen with data: $data');

    // ‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ notifications ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤ notification ‡∏à‡∏∞‡∏°‡∏µ data ‡∏≠‡∏∞‡πÑ‡∏£
    await _navigateToNotificationsScreen(context, data);
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏á‡∏≤‡∏ô
  static Future<void> _navigateToJobDetail(
    BuildContext context, 
    Map<String, dynamic> data
  ) async {
    final String? randomCode = data['randomCode'];

    print('üîç Attempting navigation to jobDetail with randomCode: $randomCode');

    if (randomCode == null || randomCode.isEmpty) {
      print('‚ö†Ô∏è randomCode is required for jobDetail navigation');
      return;
    }

    try {
      // ‡∏™‡πà‡∏á‡πÅ‡∏Ñ‡πà randomCode ‡∏Å‡πá‡∏û‡∏≠ ‡∏´‡∏ô‡πâ‡∏≤ JobDetailScreen ‡∏à‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏Å getJobOrderTripByRandomCode ‡πÄ‡∏≠‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
      final args = {
        'randomCode': randomCode,
      };
      
      print('üöÄ Navigating to /job-detail with randomCode: $randomCode');
      
      await Navigator.of(context).pushNamed(
        '/job-detail',
        arguments: args,
      );
      print('‚úÖ Successfully navigated to job detail: $randomCode');
    } catch (e) {
      print('‚ùå Error navigating to job detail: $e');
      print('üìã Stack trace: ${StackTrace.current}');
    }
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ dashboard
  static Future<void> _navigateToDashboard(
    BuildContext context,
    Map<String, dynamic> data
  ) async {
    try {
      await Navigator.of(context).pushNamedAndRemoveUntil(
        '/dashboard',
        (route) => false,
      );
      print('‚úÖ Successfully navigated to dashboard');
    } catch (e) {
      print('‚ùå Error navigating to dashboard: $e');
    }
  }

  /// ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤ notifications list
  static Future<void> _navigateToNotificationsScreen(
    BuildContext context,
    Map<String, dynamic> data
  ) async {
    try {
      await Navigator.of(context).pushNamed('/notifications');
      print('‚úÖ Successfully navigated to notifications screen');
    } catch (e) {
      print('‚ùå Error navigating to notifications screen: $e');
    }
  }

  /// ‡πÅ‡∏õ‡∏•‡∏á payload string ‡πÄ‡∏õ‡πá‡∏ô Map
  static Map<String, dynamic> parsePayload(String? payload) {
    if (payload == null || payload.isEmpty) {
      return {};
    }

    print('üîç Parsing payload: $payload');

    try {
      // ‡∏•‡∏≠‡∏á‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å JSON string ‡∏õ‡∏Å‡∏ï‡∏¥‡∏Å‡πà‡∏≠‡∏ô
      if (payload.startsWith('{') && payload.endsWith('}')) {
        return json.decode(payload) as Map<String, dynamic>;
      }
      
      // ‡πÅ‡∏õ‡∏•‡∏á‡∏à‡∏≤‡∏Å toString() format ‡∏Ç‡∏≠‡∏á Dart Map
      // ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: "{randomCode: sKBMapEIcB, page: jobDetail}"
      String cleanPayload = payload.trim();
      
      // ‡∏•‡∏ö { ‡πÅ‡∏•‡∏∞ } ‡∏≠‡∏≠‡∏Å
      if (cleanPayload.startsWith('{') && cleanPayload.endsWith('}')) {
        cleanPayload = cleanPayload.substring(1, cleanPayload.length - 1);
      }
      
      final Map<String, dynamic> result = {};
      
      // ‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ ", " ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÅ‡∏¢‡∏Å key-value pairs
      final parts = cleanPayload.split(', ');
      
      for (final part in parts) {
        // ‡πÅ‡∏¢‡∏Å key ‡πÅ‡∏•‡∏∞ value ‡∏î‡πâ‡∏ß‡∏¢ ": "
        final colonIndex = part.indexOf(': ');
        if (colonIndex > 0) {
          final key = part.substring(0, colonIndex).trim();
          final value = part.substring(colonIndex + 2).trim();
          result[key] = value;
        }
      }
      
      print('‚úÖ Parsed payload result: $result');
      return result;
    } catch (e) {
      print('‚ùå Error parsing payload: $e');
      
      // Fallback: ‡∏ñ‡πâ‡∏≤ parse ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡πÅ‡∏¢‡∏Å‡∏î‡πâ‡∏ß‡∏¢ regex
      try {
        final Map<String, dynamic> fallbackResult = {};
        final regExp = RegExp(r'(\w+):\s*([^,}]+)');
        final matches = regExp.allMatches(payload);
        
        for (final match in matches) {
          final key = match.group(1)?.trim() ?? '';
          final value = match.group(2)?.trim() ?? '';
          if (key.isNotEmpty && value.isNotEmpty) {
            fallbackResult[key] = value;
          }
        }
        
        print('‚úÖ Fallback parsed result: $fallbackResult');
        return fallbackResult;
      } catch (fallbackError) {
        print('‚ùå Fallback parsing also failed: $fallbackError');
        return {};
      }
    }
  }

  /// ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏•‡∏∞‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ notification tap
  static Future<void> handleNotificationTap(String? payload) async {
    if (payload == null || payload.isEmpty) {
      print('‚ö†Ô∏è Empty notification payload');
      return;
    }

    print('üì± Processing notification tap with payload: $payload');
    
    final Map<String, dynamic> data = parsePayload(payload);
    if (data.isEmpty) {
      print('‚ö†Ô∏è Failed to parse notification payload');
      return;
    }

    await handleNotificationNavigation(data);
  }
}